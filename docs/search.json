[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  イントロダクション",
    "section": "",
    "text": "スライド"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "1期ゼミ資料",
    "section": "",
    "text": "佐久間ゼミ資料\n佐久間からのお知らせ，説明資料はここに書き足していきます。"
  },
  {
    "objectID": "2_分析環境の構築_text.html",
    "href": "2_分析環境の構築_text.html",
    "title": "2  分析環境の構築",
    "section": "",
    "text": "3 参考になるサイト\nRのコマンドやパッケージは無数にあります。いつも使うもの以外は覚えてられません。\nでも大丈夫。ネット上にはさまざまなコマンドの紹介やエラーへの対処法が落ちています。"
  },
  {
    "objectID": "2_分析環境の構築_text.html#rについて",
    "href": "2_分析環境の構築_text.html#rについて",
    "title": "2  分析環境の構築",
    "section": "2.1 Rについて",
    "text": "2.1 Rについて\n\n2.1.1 Rとは\nRは，統計分析に強みを持つコンピュータ言語です（統計ソフトと呼ぶこともあるけど，厳密な違いはよくわかりません）。\n\n\n2.1.2 他のソフト・方法との比較\nエクセルでもある程度の分析はできますが，覚えさえすればエクセルよりもはるかに簡単です。また，エクセルでできる分析は限られていますが，Rではそれよりもはるかに高度なことができます。また，エクセルはそもそも表計算ソフトです。データが簡単にいじれてしまう（書き換えられてしまう）状態で分析作業をするのは好ましくありません。\nなんといってもフリーです。個人のコンピューター（職場が許すのであれば職場のコンピューターにも）にダウンロードすれば，卒業後も使えます。対してIBM社のSPSSは非常に高額です。研究者にでもならない限り個人で購入することはないでしょうし，職場で予算を取ることも難しいかもしれません。\n機械学習との絡みでPythonが流行ってきています。ただ，統計分析に関してはRに一日の長があるという印象です。Pythonはなんでも出来るけど，統計分析部分の操作性・拡張性はRの方が良さそう。\nコンピュータ言語のとっかかりはRでも，Rを使えるようになったらPythonもそこまで負担なく覚えられるでしょう。"
  },
  {
    "objectID": "2_分析環境の構築_text.html#rstudio",
    "href": "2_分析環境の構築_text.html#rstudio",
    "title": "2  分析環境の構築",
    "section": "2.2 Rstudio",
    "text": "2.2 Rstudio\nPosit社の提供する統合開発環境（IDE）。RはそれだけだとWindowsのconsoleとか，Macのterminalみたいな，コマンドだけの画面\n\nこれで使えないわけでもなけれど，もっと使いやすい方が良い。Rをもっと使いやすい状態にしてくれるアプリがRstudioです。\n\nRの画面（左下）\nRのプログラムを書くスペース（左上）\n読み込んだデータや，過去に実行したコマンドが見れるスペース（右上）\nパッケージやファイル，作った図表などがみれるスペース（右下）\n\n\n\nRstudioを使うと，分析結果レポートを文書やプレゼン用スライドに直接書き出すこともできます。\n\nいまこの資料もRstudioで書いています。\n\n文献リストの挿入などの機能も実装できるので，その気になればデータ分析から論文執筆まで全てRstudioでできます。\n\nGoogle colabなど，他の開発環境もありますが，インストールさえしてしまえば，Rstudioの方が便利だと思います。"
  },
  {
    "objectID": "2_分析環境の構築_text.html#rとrstudioのインストール",
    "href": "2_分析環境の構築_text.html#rとrstudioのインストール",
    "title": "2  分析環境の構築",
    "section": "2.3 RとRstudioのインストール",
    "text": "2.3 RとRstudioのインストール\n\n2.3.1 Rのインストール\n\nR の公式サイトに行くhttps://cloud.r-project.org\n自分のOSに合ったものを選択\n\nWindowsなら Download R for Windows\n\nBase を選ぶ\n\nMacならDownload R for macOS\n\nSliconならR-X.X.X-arm64.pkg，IntelならR-X.X.X.pkg\n\n\nダウンロードしたものを実行してインストール\n\n\n\n2.3.2 Rstudioのインストール\n\nRStudio の公式サイトに行くhttps://posit.co/products/open-source/rstudio/\n無料版（Open Source Edition）を選択\n自分のOSに合ったものを選んでダウンロード\nダウンロードしたものを実行してインストール\n\nX.X.X という部分はバージョン番号です。"
  },
  {
    "objectID": "2_分析環境の構築_text.html#rの操作",
    "href": "2_分析環境の構築_text.html#rの操作",
    "title": "2  分析環境の構築",
    "section": "2.4 Rの操作",
    "text": "2.4 Rの操作\n\n2.4.1 スクリプトファイル\nRなどの統計ソフトを使う利点の一つは，再現性です。例えばエクセルでは，どんな順番にどんな処理をしたのかは記録されません。Rなどのプログラミングソフトを使うと，操作した内容と順番をコードの形で記録しておけます。コードを記録したファイルを「スクリプトファイル」と言います。\nスクリプトファイルは，画面左上にある緑の「＋」アイコンを押して，「R Script」を選択することで新規作成できます。\n\nスクリプトファイルを作成すると（初期状態では）画面の左上に白紙のファイルが出てきます。ここにコマンドを打ち込んでいきます。例えば以下のコマンドを打つと，画面の左下にあるRの画面に実行結果が出ます。\n\n1 + 1\n\n[1] 2\n\n\n左下の画面（console）に直接 1+1 と打ち込んでも同じ結果が出ますが，後で記録に残らないので，コードはスクリプト画面に書く，左下は結果の表示だけ，と使い分けた方が良いです。\n\n\n\n2.4.2 課題\nRスクリプトに以下の内容を打ち込んでください。スクリプト右上のRunボタンを押すか，Control + Enter (Macの場合は⌘+Enter)で実行してください。\n\n1+3 #足し算\n\n[1] 4\n\n2*4 #掛け算\n\n[1] 8\n\n#変数を先に定義して，計算。printで表示\nx = 3\ny = 5\nz = x * y\nprint(z)\n\n[1] 15"
  },
  {
    "objectID": "2_分析環境の構築_text.html#rプログラミングの基礎",
    "href": "2_分析環境の構築_text.html#rプログラミングの基礎",
    "title": "2  分析環境の構築",
    "section": "2.5 Rプログラミングの基礎",
    "text": "2.5 Rプログラミングの基礎\nこのパートは森知晴先生（立命館大学総合心理学部）のサイト (卒業論文のためのR入門) 及び今井耕介先生（Harvard University / 東京大学）の著書 (社会科学のためのデータ分析入門)等を参考にしています。\n\n2.5.1 オブジェクト\nRでは情報を自分で名前をつけたオブジェクトとして保存できます。Rstudioでは，保存されたオブジェクトは右上のEnvironmentと言うところに表示されます。\n\nx <- 1\n\n「<-」の左はオブジェクト，右はその中身を表します。なので，「xという名前のオブジェクトに1を入れる」という指示をしています。これを実行すると画面右上にxというオブジェクトが表示されるはずです。xの中身を確認するには，そのオブジェクトの名前（今回の場合x）を打つと良いです。\n\nx\n\n[1] 1\n\n\n文字列でもオブジェクトになります。\n\nuniv <- \"Ritsumeikan University\"\nuniv\n\n[1] \"Ritsumeikan University\"\n\n\n複数の数値の並び（ベクトル）をオブジェクトとすることもできます。\n\nvec <- c(1, 2, 3, 4, 5)\n\n縦×横の行列も作れます。matrixという名前です。ncol=2は列の数, byrow=TRUEは，横に並べるということ。\n\nmat <- matrix(c(435,165,265,135), ncol=2, byrow=TRUE)\nmat\n\n     [,1] [,2]\n[1,]  435  165\n[2,]  265  135\n\n\n例えばbyrow=FALSE にすると縦に並ぶ\n\nmat2 <- matrix(c(435,165,265,135), ncol=2, byrow=FALSE)\nmat2\n\n     [,1] [,2]\n[1,]  435  265\n[2,]  165  135\n\n\n縦横の名前をつけると\n\nrownames(mat) <- c(\"行1\", \"行2\")\ncolnames(mat)<- c(\"列1\", \"列2\")\nmat\n\n    列1 列2\n行1 435 165\n行2 265 135\n\n\n\n\n2.5.2 データフレーム\nオブジェクトの中で重要な形式として，データフレームがあります。これは，縦方向に観測値を、横方向に変数を並べたデータを言います。\n\nage <- c(18, 21, 22, 23, 34) #年齢のベクトル\ngender <- c(\"female\", \"male\", \"male\", \"female\", \"female\")#性別のベクトル\ndframe <- data.frame(age, gender)\ndframe\n\n  age gender\n1  18 female\n2  21   male\n3  22   male\n4  23 female\n5  34 female\n\n\nエクセル等のデータを読み込んで分析する場合は，このデータフレーム形式です。\nデータフレームの中の特定の行を指定する場合は，「データフレーム名$列名」\n\ndframe$gender\n\n[1] \"female\" \"male\"   \"male\"   \"female\" \"female\"\n\n\n\n\n2.5.3 計算\n簡単な計算は，以下の通り\n\n1+1 \n\n[1] 2\n\n2*6 #掛け算は*\n\n[1] 12\n\n2^4 #累乗は^\n\n[1] 16\n\nsqrt(16) #ルートはsqrt()\n\n[1] 4\n\n\n\n\n2.5.4 関数\nRを使う上で最も重要。何がしかの命令をすると，何かの結果が返ってくる。\n\nmean(dframe$age) #平均はmean\n\n[1] 23.6\n\nmin(dframe$age) #最小値（最大値）はmin(max)\n\n[1] 18\n\nmedian(dframe$age) #中央値はmedian\n\n[1] 22\n\n\n上にあるように，Rのコマンドは基本的には，やること(実行する対象)という構造になっている。\n\nmean(dframe$age)は，\n\nやることが平均(mean)\n対象がデータフレームdframeのなかのage (dframe$age)\n\n\n\n\n2.5.5 プログラムの改行\nRではかっこ()やコンマ（,）の後など，コードの切れ目で開業しても動作します。特に()何重にもなる場合，改行したほうが見やすいかもしれません。例えば，上でやった行列の作成コマンド\n\nmat <- matrix(c(435,165,265,135), ncol=2, byrow=TRUE)\n\nは，以下のように書いても全く同じように動作します。\n\nmat <- matrix(\n  c(435,165,265,135), \n  ncol=2, \n  byrow=TRUE\n  )\n\nこれでも同じですが，あまり改行しすぎるのもかえって読みにくいかもしれません。自分が見やすいように程よく改行してください。\n\nmat <- \n  matrix(\n  c(\n    435,\n    165,\n    265,\n    135\n    ), \n  ncol=2, \n  byrow=TRUE\n  )"
  },
  {
    "objectID": "2_分析環境の構築_text.html#分析のための準備",
    "href": "2_分析環境の構築_text.html#分析のための準備",
    "title": "2  分析環境の構築",
    "section": "2.6 分析のための準備",
    "text": "2.6 分析のための準備\n\n2.6.1 パッケージ\nRはそのままでもある程度のことができますが，より高度なことをしたり，同じことをより簡単にしたりするために追加の機能を足すことができます。この追加の機能はパッケージと言います。\nRがスマートフォンのOSのようなもので，パッケージはアプリのようなもの。iOSやAndroidは，そのままでも色々できるけれど，アプリを入れた方が便利。\nRのプログラムを格段にわかりやすくするパッケージであるtidyverseを使う準備をしてみます。パッケージは，最初に使う時にはインストールする必要があります（これは1回だけ。App Storeでアプリをとるような感じ）。\n\ninstall.packages(tidyverse)\n\nパッケージを使う時には，分析ファイルを実行する最初の段階で以下のコマンドを使います（スマートフォンにすでに入っているアプリを開くイメージ）。\n\nlibrary(tidyverse)\n\n後で使うので，以下のパッケージも読み込んでおきます。\n\nlibrary(magrittr)\nlibrary(googledrive)\n\n\n\n2.6.2 Working Directoryの設定\n次に，Rが作業する場所（wd）を設定します。これは次で読み込むデータが保存されていたり，プログラムの中で生成したデータが保存されたりする場所です。\nパソコン上の場所をうまく指定できるのであれば，以下のようにコマンドを打てば良い です(下はMacでデスクトップをwdにした例)\n\nsetwd(\"~/Desktop\")\n\n場所の指定がうまくできない場合，Rstudio右下の箱の Filesタブから指定したいフォルダを選び，⚙マークから「Set As Working Directory」を選ぶことで，コマンドを実行してくれます (その後実行されたコマンドを自分のプログラムファイルにコピーしておくと次回以降便利)"
  },
  {
    "objectID": "2_分析環境の構築_text.html#データの読み込み",
    "href": "2_分析環境の構築_text.html#データの読み込み",
    "title": "2  分析環境の構築",
    "section": "2.7 データの読み込み",
    "text": "2.7 データの読み込み\n前回はデータを下記のように手打ちしました。\n\nage <- c(18, 21, 22, 23, 34) #年齢のベクトル\ngender <- c(\"female\", \"male\", \"male\", \"female\", \"female\")#性別のベクトル\ndframe <- data.frame(age, gender)\n\nしかし，アンケートデータや，企業の会計データ等をこのように手打ちするのは現実的ではありません。エクセル等で集計されたデータを読み込むのが一般的です。\n\n例えばgoogle formsでアンケートを作成したら，googleスプレットシート（googleのエクセルみたいなもの）に自動的に集計されます。\n\n以下では，エクセルファイルを読み込む方法についてまとめています。\n\n2.7.1 csvファイルの取り込み\nエクセルで列が変数，行が観測となるようにデータを作られていることを想定します。まず，これを表計算ソフト上でcsv形式で保存します。ここでは，さんプルデータとして下のような10人の生徒の4教科の科目のテストの点数を記録したファイルを作成しています。\nエクセル形式で保存されたファイルも読み込めますが，余計な情報が入っていないcsvファイルの方がトラブルが少ない？\n\nwdに入れたファイルを読み込むには，csv形式なら，read_csv(\"ファイル名\") もしくはread.csv(\"ファイル名\")を使います(ファイルがとても大きいとかでなかったらどっちを使ってもあまり変わりありません)。ここでは，tests.csvと言う名前のデータを，testsと言う名前で読み込んでいます。\n\n\n\n\n\n\n読み込んだデータを見てみます。今回はいいけど，データが大きい場合など，たくさん表示されたら鬱陶しいなら最初のいくつかだけが表示されるhead(データ名)コマンドが便利です。\n\nhead(tests)\n\n# A tibble: 6 × 5\n  出席番号  math japanese history physics\n     <dbl> <dbl>    <dbl>   <dbl>   <dbl>\n1        1    41       35      71      90\n2        2    74       76      30      35\n3        3    65        7      41      75\n4        4    76       24      42      78\n5        5    53        8      47      51\n6        6    29       80      14      19\n\n\n\n\n2.7.2 Google Driveに保存されたcsvファイルの読み込み\nデータをグループで共有するときなどに便利です。\n\ngoogle driveに保存したデータを共有（リンクを知っている人全員）に設定\nリンクurl（https://drive.google.com/file/d/*********/view?usp=sharing）の********の部分がidなので，その部分をメモしておく。\n下記の通り，idを定義して，下記の通りのコードを実行すると，目当てのファイルを取り込める。\n\n\nid = \"1x7426qSraIRdcbgW3a0F8vMF181Q_DHF\"\n\nz = read_csv(sprintf(\"https://docs.google.com/uc?id=%s&export=download\", id))\n\n\n\n2.7.3 Dropboxに保存されたcsvファイルの読み込み\ngoogle driveと基本的に同じ\n\nDropbox上のファイルを共有，リンクを取得\nリンクの最後 dl=0をdl=1に変えて，read_csv (もしくは read.csv)コマンドで読み込めます\n\n\nz2 <- read_csv(\"https://www.dropbox.com/s/6x344sfra54mcco/tests.csv?dl=1\")\n\nRows: 10 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (5): 出席番号, math, japanese, history, physics\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "2_分析環境の構築_text.html#パイプ演算子",
    "href": "2_分析環境の構築_text.html#パイプ演算子",
    "title": "2  分析環境の構築",
    "section": "2.8 パイプ演算子",
    "text": "2.8 パイプ演算子\ntidyverseとmagrittrパッケージのパイプ演算子を使うことで，同じコマンドをより読みやすくできます。これからは断りなくこれらのパッケージの機能を使います。\n\n2.8.1 例1\n読み込んだデータtestの算数(math)の平均点を求めたい。普通にやると [1.5.2 ][デ][ータフレーム]にあるように，データフレーム名$列名で指定するので\n\nmean(tests$math)\n\nパイプ演算子%$%を使うと同じコマンドが以下のようになる\n\ntests %$%\n  mean(math)\n\nこれだとあまり何がいいのかわかりませんが，複数の変数を指定したいときなど，いちいちデータフレーム名を指定しなくて良いので便利です。\n\n\n2.8.2 例2\n例1だと便利さを実感しにくいですが，例えば以下のコマンドだともう少し便利さがわかるかもしれません。以下は(1)testデータを使って，(2)数学の点数と他の点数の関係を分析(lm)した上で，(3)その結果を表示する(summary)もの。\n\nsummary(lm(math ~ japanese + physics ,data = tests))\n\n日本語の順番と，コマンドの構造が反対 (結果を表示する→分析内容→データ)\n全く同じことをパイプ演算子を使うと，(1) testデータで(2)分析をして(3)結果の要約を表示する，という思考の順番で書けます。\n\ntests %$%\n  lm(math ~ japanese + physics) %>% \n  summary\n\n命令が複雑になる程効果が実感できます。\nちなみに%$%は，使うデータを指定するのに使う。%>%はコマンドの結果を次のコマンドに渡すのに使う。"
  },
  {
    "objectID": "2_分析環境の構築_text.html#データの処理",
    "href": "2_分析環境の構築_text.html#データの処理",
    "title": "2  分析環境の構築",
    "section": "2.9 データの処理",
    "text": "2.9 データの処理\n分析に入る前に必要そうな処理を紹介します。\n\n2.9.1 新しい変数の作成\n現在のデータにはない，4教科の合計点が欲しい。新しい変数はmutate()で作る。\nただし，mutateだけだと，変数を作ってどこにも保存してくれないので，保存場所を指定する必要があります。今回は元のデータに付け足す形で作ります。\n\ntests <- tests %>% \n  mutate(sum = math + japanese + history + physics)\n\ntests に testsの中のデータを使って作った新しい変数を入れる。1行目が冗長なので，パイプ%<>%を使って書き直すと\n\ntests %<>%\n  mutate(sum = math + japanese + history + physics)\n\n以下も同じ\n\ntests %<>%\n  rowwise() %>% \n  mutate(sum = sum(math, japanese, history, physics)) %>% \n  ungroup()"
  },
  {
    "objectID": "2_分析環境の構築_text.html#使い方全般",
    "href": "2_分析環境の構築_text.html#使い方全般",
    "title": "2  分析環境の構築",
    "section": "3.1 使い方全般",
    "text": "3.1 使い方全般\n森知晴先生（立命館大学総合心理学部）のサイト (卒業論文のためのR入門)\n\nインストール方法から学部卒論程度の分析までの使い方を詳しく説明してくれています。\n困ったらまずここ\n\nここに載っていない場合は，「やりたいこと + R」でググると手っ取り早い\n最近ならChatGPTに聞くっていう手も案外いけるらしい…"
  },
  {
    "objectID": "2_分析環境の構築_text.html#エラーについて",
    "href": "2_分析環境の構築_text.html#エラーについて",
    "title": "2  分析環境の構築",
    "section": "3.2 エラーについて",
    "text": "3.2 エラーについて\nプログラミングをやってて一番むかつき，嫌いになる要因はエラーメッセージ\nできることは\n\nエラーメッセージをちゃんと読むこと\nエラーメッセージをそのままググること\n\n「エラーが出てたら99.999%自分が打ったコードが悪い（パソコンは悪くない）ということを自覚すること」"
  }
]